//
// file: eulers_number_approximation.cpp
// type: C++ (source file)
// date: 28_OCTOBER_2022
// author: Karlina Ray Beringer (@karbytes)
// license: PUBLIC_DOMAIN
// description: The command line application which is generated by the C++ source code in this file generates an approximation of the the mathematical constant named e (i.e. Euler’s Number) by adding (1/N) to (1/(N – 1)) to (1/(N – 2)) to … (1/(N – (N – 1)) such that N is a natural number.
//

/* preprocessing directives */
#include <iostream> // command line input and output
#include <fstream> // file input and output
#define MAXIMUM_N 1000 // constant which represents maximum N value

/* function prototypes */
long double e(int N, std::ostream & output);

/**
 * Generate an approximation of the the mathematical constant named e (i.e. Euler’s Number) 
 * by adding (1/N) to (1/(N – 1)) to (1/(N – 2)) to … (1/(N – (N – 1)) such that N is a natural number.
 * 
 * The value returned by this function is a floating-point number value.
 */
long double e(int N, std::ostream & output)
{
	// Declare a long double type variable (i.e. a variable for storing floating-point number values) named A. 
	// Set the intial value which is stored in A to zero.
	long double A = 0.0;

	// Declare an int type variable (i.e. a variable for storing integer values) named _N. 
	// Set the intial value which is stored in _N to one.
	// Declare an int type variable (i.e. a variable for storing integer values) named i. 
	// Set the intial value which is stored in i to zero.
	int _N = 1, i = 0;

	// Declare a pointer to an int type variable named T.
	// Declare a pointer to an int type variable named P.
	int * T;

	// If N is smaller than zero or if N is larger than MAXIMUM_N, set _N to one. 
	_N = ((N < 0) || (N > MAXIMUM_N)) ? 1 : N;

	// Set the value of N to the value of _N.
	N = _N;

	// Allocate N contiguous int sized chunks of memory to an array for storing N integer values.
	// Store the memory address of the first element of that array in T.
	T = new int [N];

	// Print "memory_address_of(A) := {memory_address_of(T)}." to the output stream.
	output << "\n\nmemory_address_of(T) := " << T << ".\n";

	// For each integer value represented by i starting at 0 and ending at N in and in ascending order: 
	// print the memory address of the ith element of the int type array represented by T to the output stream.
	for (i = 0; i < N; i += 1) 
	{
		// Print "T[{i}] := {memory_address_of(T[i])}." to the output stream.
		output << "\nT[" << i << "] := " << &T[i] << ".";
	}

	// Print a single newline character to the output stream.
	output << '\n';

	// For each integer value represented by i starting at 0 and ending at N in and in ascending order:
	// set value of the ith element of the int type array represented by T to absolute_value_of(i - N) and
	// print the data value which is stored in the ith element of the array to the output stream.
	for (i = 0; i < N; i += 1) 
	{
		// Store the value of _N in T[i].
		T[i] = _N;

		// Subtract one from the value which is stored in _N.
		_N -= 1; 

		// Print "T[{i}] := {T[i]}." to the output stream.
		output << "\nT[" << i << "] := " << T[i] << ".";
	}

	// De-allocate memory which was assigned to the array named T.
	delete [] T;

	// Return the value which is stored in A.
	return A;
}

/* program entry point */
int main()
{
	// Declare a file output stream object named file.
	std::ofstream file;

	// Declare an int type variable (i.e. a variable for storing integer values) named N. 
	// Set the intial value which is stored in N to zero.
	int N = 0;

    // Set the number of digits of floating-point numbers which are printed to the command line terminal to 100 digits.
    std::cout.precision(100);

    // Set the number of digits of floating-point numbers which are printed to the file output stream to 100 digits.
    file.precision(100);

	/**
	 * If the file named eulers_number_approximation_output.txt does not already exist inside of the same 
	 * file directory as does the file named eulers_number_approximation.cpp, 
	 * create a new file named eulers_number_approximation_output.txt.
	 * 
	 * Open the plain-text file named eulers_number_approximation_output.txt 
	 * and set that file to be overwritten with program data.
	 */
	file.open("eulers_number_approximation_output.txt");

	// Print an opening message to the command line terminal.
	std::cout << "\n\n--------------------------------";
	std::cout << "\nSTART OF PROGRAM";
	std::cout << "\n--------------------------------";

	// Print an opening message to the file output stream.
	file << "--------------------------------";
	file << "\nSTART OF PROGRAM";
	file << "\n--------------------------------";

	// Print "Enter a nonnegative integer value which is no larger than {MAXIMUM_N}: " to the command line terminal.
	std::cout << "\n\nEnter a nonnegative integer value which is no larger than " << MAXIMUM_N << ": ";

	// Scan the command line terminal for the most recent keyboard input value.
	std::cin >> N;

	// Print "Enter a nonnegative integer value which is no larger than {MAXIMUM_N}: " to the command line terminal.
	std::cout << "\n\nEnter a nonnegative integer value which is no larger than " << MAXIMUM_N << ": ";

	// Print "Enter a nonnegative integer value which is no larger than {MAXIMUM_N}: " to the file output stream.
	file << "\n\nEnter a nonnegative integer value which is no larger than " << MAXIMUM_N << ": ";

	// Print "The value which was entered to store inside of the int type variable named N is {N}." to the command line terminal.
	std::cout << "\nThe value which was entered to store inside of the int type variable named N is " << N << ".";

	// Print "The value which was entered to store inside of the int type variable named N is {N}." to the file output stream.
	file << "\n\nThe value which was entered to store inside of the int type variable named N is " << N << ".";

	// If N is smaller than zero or if N is larger than MAXIMUM_N, set N to zero.
	N = ((N < 0) || (N > MAXIMUM_N)) ? 0 : N;

	// Print "N := {N}." to the command line terminal.
	std::cout << "\n\nN := " << N << ".";

	// Print "N := {N}." to the file output stream.
	file << "\n\nN := " << N << ".";

	// Print "memory_address_of(N) := {memory_address_of(N)}." to the command line terminal.
	std::cout << "\n\nmemory_address_of(N) := " << &N << ".";

	// Print "memory_address_of(N):= {N}." to the file output stream.
	file << "\n\nmemory_address_of(N) := " << &N << ".";

	// Print "e(N) := {e(N)}." to the command line terminal.
	std::cout << "\n\ne(N) := " << e(N, std::cout) << ".";

	// Print "e(N) := {e(N)}." to the file output stream.
	file << "\n\ne(N) := " << e(N, file) << ".";

	// Print a closing message to the command line terminal.
	std::cout << "\n\n--------------------------------";
	std::cout << "\nEND OF PROGRAM";
	std::cout << "\n--------------------------------\n\n";

	// Print a closing message to the file output stream.
	file << "\n\n--------------------------------";
	file << "\nEND OF PROGRAM";
	file << "\n--------------------------------";

	// Close the file output stream.
	file.close();

	// Exit the program.
	return 0;
}